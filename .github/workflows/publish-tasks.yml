# This is a basic workflow to help you get started with Actions

name: Download tasks

# Controls when the workflow will run
on:
  workflow_dispatch:
  schedule:
    - cron: "22 2 * * *"

# Reject all permissions by default
permissions: {}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Permissions required for this job
    permissions:
      contents: write      # Read repository contents and create/update releases and their assets
      actions: read        # Read actions for GitHub CLI operations

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          lfs: true

      - run: |
          Invoke-Expression "& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI -quiet"
        name: Upgrade to latest preview of powershell 
        if: false
        shell: powershell
        # "C:\Program Files\PowerShell\7-preview" >> $env:GITHUB_PATH
        # https://github.com/PowerShell/PowerShell/issues/17404#issuecomment-1188348379

      - run: |
          .\build.ps1
        shell: pwsh
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Download tasks and build side-by-side versions.

      - run: |
          if (test-path -PathType Leaf ./_vsix/*.vsix)
          {
            & npm install tfx-cli@0.21.3 --location=global --no-fund
            $anyFailures = $false
            foreach ($vsix in dir ./_vsix/*.vsix)
            {
               Write-Output "Publishing: $($vsix.FullName)"
               Write-Output "::group::Checking extension version for $($vsix.Name)"
               $json = (& tfx extension show --token $env:AZURE_MARKETPLACE_PAT --vsix $vsix.FullName --json) | ConvertFrom-Json
               Write-Output "::endgroup::"
               
               if (-not ($json.versions -and $json.versions.count -gt 0 -and $vsix.FullName.EndsWith("$($json.versions[0].version).vsix")))
               {
                 Write-Output "::group::Publishing extension $($vsix.Name)"
                 & tfx extension publish --vsix $vsix.FullName --token $env:AZURE_MARKETPLACE_PAT
                 if ($LASTEXITCODE -ne 0) {
                   Write-Output "::error::Failed to publish extension $($vsix.Name)"
                   $anyFailures = $true
                 } else {
                   Write-Output "::notice::Successfully published extension $($vsix.Name)"
                 }
                 Write-Output "::endgroup::"
               }
               else {
                 Write-Output "::notice::Extension $($vsix.Name) is already up to date, skipping publish"
               }
            }
            if ($anyFailures) {
              Write-Output "::error::One or more extensions failed to publish"
              exit 1
            }
          }
        shell: pwsh
        name: Publish extensions
        env:
          AZURE_MARKETPLACE_PAT: ${{ secrets.AZURE_MARKETPLACE_PAT }}
